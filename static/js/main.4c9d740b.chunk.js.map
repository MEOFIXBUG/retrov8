{"version":3,"sources":["services/postData.js","services/auth-header.js","services/auth.service.js","pages/login.js","services/Delete.js","services/Put.js","services/board.service.js","customs/BoardItem.js","customs/Board.js","customs/AddBoard.js","pages/myboard.js","customs/Card.js","customs/Category.js","services/job.service.js","pages/detail.js","pages/register.js","App.js","serviceWorker.js","index.js"],"names":["postData","a","url","data","attachedheaders","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","response","json","authHeader","strToken","localStorage","getItem","Boolean","token","parse","Headers","API_URL","username","password","then","setItem","removeItem","name","email","Login","state","authError","isLoading","location","handleEmailChange","event","setState","target","value","handlePwdChange","handleSubmit","preventDefault","AuthService","login","error","responseGoogle","profileObj","googleId","register","split","success","responseFacebook","console","log","id","componentClicked","renderRedirect","to","auth","window","href","this","className","onSubmit","placeholder","type","onChange","autoFocus","required","htmlFor","disabled","role","aria-hidden","clientId","buttonText","onSuccess","onFailure","appId","fields","onClick","callback","Component","Delete","Put","boardName","header","flag","useStyles","makeStyles","theme","root","maxWidth","avatar","backgroundColor","red","expand","transform","marginLeft","transition","transitions","create","duration","shortest","BoardItem","props","classes","isPublished","item","formatter","Intl","DateTimeFormat","year","month","day","Card","CardHeader","Avatar","aria-label","byName","slice","action","IconButton","onDelClick","subheader","format","Date","createdAt","CardContent","Typography","variant","color","component","CardActions","disableSpacing","mine","onPublishClick","cardGrid","paddingTop","spacing","paddingBottom","Board","useState","setError","isLoaded","setIsLoaded","items","setItems","useEffect","BoardService","getUserBoard","myboard","getSharedBoard","sharedboard","result1","result2","result","concat","message","fetchData","handleDelte","i","DeleteBoard","res","filter","handlePublish","PublishBoard","newSrc","forEach","element","alert","Container","Grid","container","map","index","xs","sm","md","AddBoard","React","open","setOpen","setName","history","useHistory","handleClose","handleAdd","InsertBoard","push","Button","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","TextField","margin","label","fullWidth","DialogActions","heroContent","palette","background","paper","padding","footer","itemRight","float","position","Album","Fragment","CssBaseline","logout","justifyContent","align","gutterBottom","relativeStyle","textareStyle","width","display","flexDirection","buttonStyle","bottom","right","readOnly","isNew","addJob","handleEdit","title","dislikesCount","deleteJob","Category","toggle","toString","CreateCard","card","AddJob","HandleDelte","HandleEdit","input","Temp","board","setBoard","idtemp","setIdtemp","getBoardByID","getJobsOfBoard","myjobs","newItems","renderSide","src","createCard","idxtemp","typeId","likes","dislikes","undefined","JobService","InsertJob","UpdateJob","DeleteJob","editBoardNameClick","UpdateBoard","EditButton","InputProps","endAdornment","Register","handleNameChange","App","exact","path","Myboard","render","match","params","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c9d740b.chunk.js","sourcesContent":["export default async function postData(url = '', data = {}, attachedheaders = {}) {\n    // Default options are marked with *\n    const response = await fetch(url, {\n        method: 'POST', // *GET, POST, PUT, DELETE, etc.\n        mode: 'cors', // no-cors, *cors, same-origin\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: 'same-origin', // include, *same-origin, omit\n        //headers: {\n        //    'Content-Type': 'application/json'\n        //    // 'Content-Type': 'application/x-www-form-urlencoded',\n        //},\n        headers: attachedheaders,\n        redirect: 'follow', // manual, *follow, error\n        referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n        body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n    });\n    return response.json(); // parses JSON response into native JavaScript objects\n}\n","export default function authHeader() {\n    const strToken=localStorage.getItem('token');\n    if (Boolean(strToken)){\n        const token = JSON.parse(strToken);\n        return new Headers({\n            'Authorization': 'Bearer ' + token,\n            'Content-Type': 'application/json;charset=utf-8',\n        })  // for asp.net core back-end\n        /* return { 'x-access-token': user.accessToken };*/       // for Node.js Express back-end\n     } else {\n        return {};\n    }\n}\n","import postData from './postData';\nimport authHeader from './auth-header';\nconst API_URL = \"https://retrov8.herokuapp.com/api/users/\";\n\nclass AuthService {\n\n    login(username, password) {\n        return postData(API_URL + \"login\", {\n            \"Username\": username,\n            \"Password\": password\n        }, { 'Content-Type': 'application/json' })\n            .then(response => {\n                if (response.data.token) {\n                    localStorage.setItem(\"token\", JSON.stringify(response.data.token));\n                }\n                return response.data;\n            });\n    }\n\n    logout() {\n        localStorage.removeItem(\"token\");\n    }\n\n    async register(name, email, password) {\n        return await postData(API_URL + \"register\",\n            {\n                'Username': name,\n                'Email': email,\n                'Password': password\n            },\n            { 'Content-Type': 'application/json' }\n        );\n    }\n\n    getCurrentUser() {\n        return JSON.parse(localStorage.getItem('token'));;\n    }\n\n    async auth() {\n        return await fetch(API_URL + 'auth', { headers: authHeader() });\n    }\n}\n\nexport default new AuthService();\n","import React, { Component } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport AuthService from \"../services/auth.service\";\nimport { GoogleLogin } from 'react-google-login';\nimport FacebookLogin from 'react-facebook-login';\nexport default class Login extends Component {\n\n    state = {\n        email: '',\n        password: '',\n        redirect: false,\n        authError: false,\n        isLoading: false,\n        location: {},\n    };\n\n    handleEmailChange = event => {\n        this.setState({ email: event.target.value });\n    };\n    handlePwdChange = event => {\n        this.setState({ password: event.target.value });\n    };\n\n    handleSubmit = event => {\n        event.preventDefault();\n        this.setState({ isLoading: true });\n        AuthService.login(this.state.email, this.state.password).then(\n            () => {\n                this.setState({ redirect: true, isLoading: false });\n                localStorage.setItem('isLoggedIn', true);\n            },\n            error => {\n\n                this.setState({ authError: true, isLoading: false });\n            }\n        );\n    };\n\n    async componentDidMount() {\n        // You can await here\n        const auth = await AuthService.auth();\n        const result = await auth.json();\n        if (result.data) {\n            window.location.href = \"/myboard\";\n        }\n        else {\n\n        }\n    }\n    responseGoogle = (response) => {\n        const profile = response.profileObj;\n        AuthService.login(response.profileObj.email, response.profileObj.googleId).then(\n            () => {\n                this.setState({ redirect: true, isLoading: false });\n                localStorage.setItem('isLoggedIn', true);\n            },\n            async error => {\n                const res = await AuthService.register(response.profileObj.email.split('@')[0], response.profileObj.email, response.profileObj.googleId);\n                if (res.success) {\n                    AuthService.login(response.profileObj.email, response.profileObj.googleId).then(\n                        () => {\n                            this.setState({ redirect: true, isLoading: false });\n                            localStorage.setItem('isLoggedIn', true);\n                        },\n                        error => {\n                            this.setState({ authError: true, isLoading: false });\n                        }\n                    )\n                }\n                else {\n                    this.setState({ authError: true, isLoading: false });\n                }\n\n            }\n        );\n\n    }\n    responseFacebook = (response) => {\n        console.log(response);\n        // const profile = response.profileObj;\n        AuthService.login(response.email, response.id).then(\n            () => {\n                this.setState({ redirect: true, isLoading: false });\n                localStorage.setItem('isLoggedIn', true);\n            },\n            async error => {\n                const res = await AuthService.register(response.email.split('@')[0], response.email, response.id);\n                if (res.success) {\n                    AuthService.login(response.email, response.id).then(\n                        () => {\n                            this.setState({ redirect: true, isLoading: false });\n                            localStorage.setItem('isLoggedIn', true);\n                        },\n                        error => {\n                            this.setState({ authError: true, isLoading: false });\n                        }\n                    )\n                }\n                else {\n                    this.setState({ authError: true, isLoading: false });\n                }\n\n            }\n        );\n    }\n    componentClicked = () => {\n        console.log('response');\n    }\n    renderRedirect = () => {\n        if (this.state.redirect) {\n            return <Redirect to='/myboard' />\n        }\n    };\n\n    render() {\n        const isLoading = this.state.isLoading;\n        return (\n            <div className=\"container\">\n                {/* <TitleComponent title=\"React CRUD Login \"></TitleComponent> */}\n                <div className=\"card card-login mx-auto mt-5\">\n                    <div className=\"card-header\">Login</div>\n                    <div className=\"text-center\">\n                    </div>\n                    <div className=\"card-body\">\n                        <form onSubmit={this.handleSubmit}>\n                            <div className=\"form-group\">\n                                <div className=\"form-label-group\">\n                                    <input className={\"form-control \" + (this.state.authError ? 'is-invalid' : '')} id=\"inputEmail\" placeholder=\"Email address\" type=\"text\" name=\"email\" onChange={this.handleEmailChange} autoFocus required />\n                                    <label htmlFor=\"inputEmail\">Email address/Username</label>\n                                    <div className=\"invalid-feedback\">\n                                        Please provide a valid Email.\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                <div className=\"form-label-group\">\n                                    <input type=\"password\" className={\"form-control \" + (this.state.authError ? 'is-invalid' : '')} id=\"inputPassword\" placeholder=\"******\" name=\"password\" onChange={this.handlePwdChange} required />\n                                    <label htmlFor=\"inputPassword\">Password</label>\n                                    <div className=\"invalid-feedback\">\n                                        Please provide a valid Password.\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                <div className=\"checkbox\">\n                                    <label>\n                                        <input type=\"checkbox\" value=\"remember-me\" />Remember Password\n                                    </label>\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                <button className=\"btn btn-primary btn-block\" type=\"submit\" disabled={this.state.isLoading ? true : false}>Login &nbsp;&nbsp;&nbsp;\n                                    {isLoading ? (\n                                        <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n                                    ) : (\n                                            <span></span>\n                                        )}\n                                </button>\n                            </div>\n                            <div className=\"form-group\">\n                                <GoogleLogin\n                                    clientId=\"411712365546-p28pbq0qrk077885iajap05pdo5ufg6k.apps.googleusercontent.com\"\n                                    buttonText=\"Login\"\n                                    onSuccess={this.responseGoogle}\n                                    onFailure={this.responseGoogle}\n                                // cookiePolicy={'single_host_origin'}\n                                />\n\n                            </div>\n                            <div className=\"form-group\">\n                                <FacebookLogin\n                                    appId=\"4657099037694433\"\n                                    fields=\"name,email,picture\"\n                                    onClick={this.componentClicked}\n                                    callback={this.responseFacebook}\n                                />\n\n                            </div>\n\n                        </form>\n                        <div className=\"text-center\">\n                            <Link className=\"d-block small mt-3\" to={'register'}>Register an Account</Link>\n                            <a className=\"d-block small\" href=\"forgot-password.html\">Forgot Password?</a>\n                        </div>\n                    </div>\n                </div>\n                {this.renderRedirect()}\n            </div>\n        );\n    }\n}\n\n\n","export default async function Delete(url = '', attachedheaders = {}) {\n    // Default options are marked with *\n    const response = await fetch(url, {\n        method: 'DELETE', // *GET, POST, PUT, DELETE, etc.\n        headers: attachedheaders,\n    });\n    return response.json(); // parses JSON response into native JavaScript objects\n}\n","export default async function Put(url = '', data = {}, attachedheaders = {}) {\r\n    // Default options are marked with *\r\n    const response = await fetch(url, {\r\n        method: 'PUT', // *GET, POST, PUT, DELETE, etc.\r\n        mode: 'cors', // no-cors, *cors, same-origin\r\n        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n        credentials: 'same-origin', // include, *same-origin, omit\r\n        //headers: {\r\n        //    'Content-Type': 'application/json'\r\n        //    // 'Content-Type': 'application/x-www-form-urlencoded',\r\n        //},\r\n        headers: attachedheaders,\r\n        redirect: 'follow', // manual, *follow, error\r\n        referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\r\n        body: JSON.stringify(data) // body data type must match \"Content-Type\" header\r\n    });\r\n    return response.json(); // parses JSON response into native JavaScript objects\r\n}\r\n","import authHeader from './auth-header';\nimport postData from './postData';\nimport Delete from './Delete';\nimport Put from './Put';\nconst API_URL = 'https://retrov8.herokuapp.com/api/boards/';\n\nclass BoardService {\n    async getUserBoard() {\n        return await fetch(API_URL , { headers: authHeader() });\n    }\n    async getSharedBoard() {\n        return await fetch(API_URL + 'shared', { headers: authHeader() });\n    }\n    async getJobsOfBoard(id) {\n        return await fetch(API_URL + id, { headers: authHeader() });\n    }\n    async getBoardByID(id) {\n        return await fetch(API_URL +'detail/'+ id, { headers: authHeader() });\n    }\n    async InsertBoard(data) {\n        return await postData(API_URL , {\n            \"ByName\": data,\n        }, authHeader() );\n    }\n    async DeleteBoard(id) {\n        return await Delete(API_URL + id, authHeader());\n            \n    }\n    async UpdateBoard(id,boardName) {\n\n        const header = authHeader();\n        return await Put(API_URL + id, {\n            \"ByName\": boardName,\n        }, header)\n\n    }\n    async PublishBoard(id,flag) {\n\n        const header = authHeader();\n        return await Put(API_URL + id, {\n            \"IsPublished\": flag,\n        }, header)\n\n    }\n}\n\nexport default new BoardService();\n","import React from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { red } from '@material-ui/core/colors';\r\nimport ShareIcon from '@material-ui/icons/Share';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport BoardService from \"../services/board.service\";\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        maxWidth: 345,\r\n    },\r\n    avatar: {\r\n        backgroundColor: red[500],\r\n    },\r\n    expand: {\r\n        transform: 'rotate(0deg)',\r\n        marginLeft: 'auto',\r\n        transition: theme.transitions.create('transform', {\r\n            duration: theme.transitions.duration.shortest,\r\n        }),\r\n    },\r\n}));\r\nexport default function BoardItem(props) {\r\n    const classes = useStyles();\r\n    const isPublished=Boolean(props.item.isPublished);\r\n    let formatter = new Intl.DateTimeFormat(\"en-GB\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        day: \"2-digit\"\r\n    });\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardHeader\r\n                avatar={\r\n                    <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n                        {props.item.byName.slice(0, 1)}\r\n                    </Avatar>\r\n                }\r\n                action={\r\n                    <IconButton aria-label=\"remove\" onClick={props.onDelClick}>\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                }\r\n                subheader={formatter.format(Date.parse(props.item.createdAt))}\r\n            />\r\n            <Link to={`/myboard/${props.id}`}>\r\n                <CardContent>\r\n                    <Typography variant=\"title\" color=\"textSecondary\" component=\"h2\">\r\n                        {props.item.byName}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Link>\r\n            <CardActions disableSpacing>\r\n\r\n                {props.item.mine ?\r\n                    <>\r\n                        <IconButton aria-label=\"publish\" onClick={props.onPublishClick} >\r\n                            <PublishIcon color= {!isPublished?\"\":\"primary\"}  />\r\n                        </IconButton>\r\n                       \r\n                    </> :\r\n                    <IconButton\r\n                        className={classes.expand}\r\n                    >\r\n                        <ShareIcon color=\"primary\" />\r\n                    </IconButton>}\r\n\r\n\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport BoardItem from './BoardItem';\r\nimport BoardService from \"../services/board.service\";\r\nconst useStyles = makeStyles((theme) => ({\r\n    cardGrid: {\r\n        paddingTop: theme.spacing(8),\r\n        paddingBottom: theme.spacing(8),\r\n    }\r\n}));\r\n\r\nexport default function Board() {\r\n    const classes = useStyles();\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [items, setItems] = useState([]);\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            // You can await here\r\n            const myboard = await BoardService.getUserBoard();\r\n            const sharedboard = await BoardService.getSharedBoard();\r\n            const result1 = await myboard.json();\r\n            const result2 = await sharedboard.json();\r\n            if (result1.success || result2.success) {\r\n                setIsLoaded(true);\r\n                const result = result1.data.concat(result2.data);\r\n                setItems(result);\r\n            }\r\n            else {\r\n                if (result1.message == 'Unauthorized' || result2.message == 'Unauthorized') {\r\n                    window.location.href = \"/\";\r\n                }\r\n                setIsLoaded(true);\r\n                setError(result1.message + '\\n' + result2.message);\r\n            }\r\n        }\r\n        fetchData();\r\n    }, []); // Or [] if effect doesn't need props or state\r\n    const handleDelte = async (i) => {\r\n        const res = await BoardService.DeleteBoard(items[i].id);\r\n        if (res.success) {\r\n            setItems(items.filter(item => item.id != items[i].id));\r\n        }\r\n        else {\r\n            if (res.message == 'Unauthorized') {\r\n                window.location.href = \"/\";\r\n            }\r\n            else{\r\n                setError(res.message);\r\n            }\r\n        }\r\n    }\r\n    const handlePublish = async (id, flag) => {\r\n        const res = await BoardService.PublishBoard(id, flag);\r\n        if (res.success) {\r\n            let newSrc = [...items];\r\n            newSrc.forEach(element => {\r\n                if (element.id == id) {\r\n                    element.isPublished = flag;\r\n                }\r\n            });\r\n            setItems(newSrc);\r\n            alert(flag?`Đã chia sẻ công khai`:'Đã hủy chia sẻ');\r\n        }\r\n        else {\r\n            if (res.message == 'Unauthorized') {\r\n                window.location.href = \"/\";\r\n            }\r\n            else{\r\n                setError(res.message);\r\n            }\r\n            \r\n        }\r\n    }\r\n    const renderBoardItem = (i) => {\r\n        return (\r\n            <BoardItem key={i} id={items[i].id} item={items[i]}\r\n                // onEditClick={(id, byName) => handleEdit(id, byName)}\r\n                onPublishClick={() => handlePublish(items[i].id, 1-items[i].isPublished)}\r\n                onDelClick={() => handleDelte(i)} \r\n                ></BoardItem>\r\n        );\r\n    }\r\n    if (error) {\r\n        return <div>Error: {error}</div>;\r\n    } else if (!isLoaded) {\r\n        return <div>Loading...</div>;\r\n    } else {\r\n        return (\r\n            <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                {/* End hero unit */}\r\n                <Grid container spacing={4}>\r\n                    {items.map((item, index) => (\r\n                        <Grid item key={item.id} xs={12} sm={6} md={4}>\r\n                            {renderBoardItem(index)}\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport BoardService from \"../services/board.service\";\r\nimport { useHistory } from 'react-router-dom';\r\nexport default function AddBoard() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const [name, setName] = React.useState(\"\");\r\n    let history = useHistory();\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const handleNameChange = (event) => {\r\n        setName(event.target.value);\r\n    }\r\n    const handleAdd = async () => {\r\n        const res = await BoardService.InsertBoard(name);\r\n        if (res.success) {\r\n            setOpen(false);\r\n            history.push(`/myboard/${res.data}`);\r\n        }\r\n        else {\r\n            if (res.message == 'Unauthorized') {\r\n                window.location.href = \"/\";\r\n            }\r\n            else{\r\n                alert(res.message);\r\n            }\r\n        }\r\n\r\n    };\r\n    return (\r\n        <div>\r\n            <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n                + Thêm mới\r\n            </Button>\r\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n                <DialogTitle id=\"form-dialog-title\">Add new one</DialogTitle>\r\n                <DialogContent>\r\n\r\n                    <TextField\r\n                        autoFocus\r\n                        margin=\"dense\"\r\n                        label=\"Name Board\"\r\n                        type=\"text\"\r\n                        name=\"boardname\"\r\n                        onChange={handleNameChange}\r\n                        fullWidth\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"primary\">\r\n                        Cancel\r\n          </Button>\r\n                    <Button onClick={handleAdd} color=\"primary\">\r\n                        Add\r\n          </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport Board from \"../customs/Board\";\r\nimport Button from '@material-ui/core/Button';\r\nimport AddBoard from \"../customs/AddBoard\";\r\nimport AuthService from \"../services/auth.service\";\r\nconst useStyles = makeStyles((theme) => ({\r\n    heroContent: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        padding: theme.spacing(8, 0, 6),\r\n    },\r\n    footer: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        padding: theme.spacing(6),\r\n    },\r\n    itemRight: {\r\n        float: \"right\",\r\n        position: \"relative\",\r\n        transform: \"translateY(-50%)\"\r\n      }\r\n}));\r\n\r\n\r\nexport default function Album() {\r\n    const classes = useStyles();\r\n    const handleClickLogOut =  () => {\r\n        AuthService.logout();\r\n        window.location.href = \"/\";\r\n    };\r\n    return (\r\n        <React.Fragment>\r\n            <CssBaseline />\r\n            <main>\r\n                {/* Hero unit */}\r\n                <div className={classes.heroContent}>\r\n                    <Button onClick={handleClickLogOut} variant=\"contained\" color=\"secondary\" className={classes.itemRight}  >\r\n                        Logout\r\n                    </Button>\r\n                    <Container maxWidth=\"sm\" justifyContent=\"center\">\r\n                        <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\r\n                            My Board\r\n                        </Typography>\r\n                        < AddBoard />\r\n                    </Container>\r\n                </div>\r\n                <Board> </Board>\r\n            </main>\r\n            {/* Footer */}\r\n            <footer className={classes.footer}>\r\n            </footer>\r\n            {/* End footer */}\r\n        </React.Fragment>\r\n    );\r\n}","import React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport './card.css';\r\nconst useStyles = makeStyles((theme) => ({\r\n    relativeStyle: {\r\n        position: \"relative\"\r\n    },\r\n    textareStyle: {\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        margin: 0,\r\n        padding: 0,\r\n    },\r\n    buttonStyle: {\r\n        position: \"absolute\",\r\n        bottom: 15,\r\n        right: 10,\r\n    }\r\n}));\r\n\r\nfunction Card(props) {\r\n    const [name, setName] = React.useState(props.item.byName?props.item.byName:\"\");\r\n    const classes = useStyles();\r\n    const handleNameChange = (event) => {\r\n        setName(event.target.value);\r\n    }\r\n    return (\r\n        <div className={\"BoardItem card j\" + props.item.type}>\r\n            <br />\r\n            <div className={classes.relativeStyle}>\r\n                <textarea\r\n                    className={classes.textareStyle}\r\n                    placeholder=\"Enter Text Here\"\r\n                    value={name}\r\n                    readOnly={!props.item.isNew}\r\n                    onChange={handleNameChange}\r\n                    // onBlur={props.validateInput}\r\n                />\r\n                {!props.item.isNew ?\r\n                    <>\r\n                    </> :\r\n                    <Button onClick={()=>props.addJob(name,props.item.isNew)} className={classes.buttonStyle} variant=\"contained\" color=\"primary\">\r\n                        {props.item.id?\"Edit\":\"Add\"}\r\n                    </Button>}\r\n            </div>\r\n            <br />\r\n            <div className=\"FunctionNav\">\r\n            {!props.item.isNew ?\r\n                   <button onClick={() => props.handleEdit(props.item.id)}>\r\n                   <i className=\"far fa-edit\" title=\"Edit\" />\r\n                   {props.dislikesCount}\r\n               </button> :\r\n                    <></>}\r\n                \r\n                <button onClick={() => props.deleteJob(props.item.id,props.item.isNew)}>\r\n                    <i className=\"far fa-trash-alt\" title=\"Delete\" />\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nfunction Category(props) {\r\n    return (\r\n        <div className={props.toggle === 1 ? \"row\" : \"col\"}>\r\n            <div className={(props.toggle === 1 ? \" Rotate-1\" : \"\").toString()}>\r\n                <h2>{props.type.byName}</h2>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"addButton\"\r\n                    onClick={() => props.CreateCard(props.type.id)}\r\n                >\r\n                    +\r\n                </button>\r\n            </div>\r\n            {props.Card.map((card) => {\r\n                    return (\r\n                        <Card\r\n                            item={card}\r\n                            addJob={props.AddJob}\r\n                            deleteJob={props.HandleDelte}\r\n                            handleEdit={props.HandleEdit}\r\n                            // cardId={card.id}\r\n                            // value={card.input}\r\n                            // likesCount={card.likes}\r\n                            // dislikesCount={card.dislikes}\r\n                            // userInput={props.userInput}\r\n                            // validateInput={props.validateInput}\r\n                            // MoveLeft={props.MoveLeft}\r\n                            // Delete={props.Delete}\r\n                            // MoveRight={props.MoveRight}\r\n                            // handleLikes={props.handleLikes}\r\n                            // handleDislikes={props.handleDislikes}\r\n                            // addClass={this.state.addClass}\r\n                            // color={props.color}\r\n                        />\r\n                    );\r\n                } \r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Category;\r\n","import authHeader from './auth-header';\nimport postData from './postData';\nimport Delete from './Delete';\nimport Put from './Put';\nconst API_URL = 'https://retrov8.herokuapp.com/api/jobs/';\n\nclass JobService {\n    async InsertJob(input, type, id) {\n\n        const header = authHeader();\n        return await postData(API_URL + 'ofboard/'+id, {\n            \"ByName\": input,\n            \"Type\": type\n        }, header)\n\n    }\n    async UpdateJob(id,input, type) {\n\n        const header = authHeader();\n        return await Put(API_URL + id, {\n            \"ByName\": input,\n            \"Type\": type\n        }, header)\n\n    }\n    async DeleteJob(id) {\n        return await Delete(API_URL + id, authHeader());\n\n    }\n}\n\nexport default new JobService();\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport BoardService from \"../services/board.service\";\r\nimport Category from '../customs/Category';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport JobService from \"../services/job.service\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport TextField from '@material-ui/core/TextField';\r\nconst useStyles = makeStyles((theme) => ({\r\n    cardGrid: {\r\n        paddingTop: theme.spacing(2),\r\n        paddingBottom: theme.spacing(2),\r\n    },\r\n    textareStyle: {\r\n        width: \"100%\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        margin: 0,\r\n        padding: 0,\r\n    },\r\n}));\r\n\r\n\r\nexport default function Temp(props) {\r\n    const classes = useStyles();\r\n    const type = [{ id: 1, byName: 'Went well' }, { id: 11, byName: 'To improve' }, { id: 21, byName: 'Action items' }];\r\n    const [items, setItems] = useState([]);\r\n    const [board, setBoard] = useState('');\r\n    const [error, setError] = useState(null);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [idtemp, setIdtemp] = useState(1);\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            // You can await here\r\n            const board = await BoardService.getBoardByID(props.id);\r\n            const res = await board.json();\r\n            if (res.success) {\r\n                setBoard(res.data.byName);\r\n            }\r\n            else {\r\n                if (res.message == 'Unauthorized') {\r\n                    window.location.href = \"/\";\r\n                }\r\n                else{\r\n                    setError(res.message);\r\n                }\r\n            }\r\n            const myjobs = await BoardService.getJobsOfBoard(props.id);\r\n            const result = await myjobs.json();\r\n            if (result.success) {\r\n                setIsLoaded(true);\r\n                let newItems = [...result.data];\r\n                newItems.forEach(element => {\r\n                    element.isNew = 0;\r\n                });\r\n                setItems(newItems);\r\n            }\r\n            else {\r\n                setIsLoaded(true);\r\n                setError(result.message);\r\n            }\r\n        }\r\n        fetchData();\r\n    }, []); // Or [] if effect doesn't need props or state\r\n    const renderSide = (type) => {\r\n        let newCards = [...items];\r\n        const src = newCards.filter(item => item.type == type.id);\r\n\r\n        return (\r\n            <div className=\"text-center\">\r\n                <Category type={type}\r\n                    Card={src}\r\n                    CreateCard={() => createCard(type.id)}\r\n                    AddJob={(input, idxtemp) => addJob(input, idxtemp)}\r\n                    HandleEdit={(id) => handleEdit(id)}\r\n                    HandleDelte={(id, idxtemp) => handleDelte(id, idxtemp)}>\r\n                </Category>\r\n            </div>\r\n        );\r\n    }\r\n    const createCard = (typeId) => {\r\n        let newSrc = [...items, {\r\n            type: typeId,\r\n            isNew: idtemp,\r\n            likes: 0,\r\n            dislikes: 0,\r\n        }];\r\n        setIdtemp(idtemp + 1);\r\n        setItems(newSrc);\r\n    }\r\n    const addJob = async (input, idxtemp) => {\r\n        let newSrc = [...items];\r\n        let value = {};\r\n        newSrc.forEach(element => {\r\n            if (element.isNew == idxtemp) {\r\n                element.byName = input;\r\n                element.isNew = 0;\r\n                value = element;\r\n            }\r\n        });\r\n        let res = {};\r\n        if (value.id === undefined) {\r\n\r\n            res = await JobService.InsertJob(value.byName, value.type, props.id);\r\n        }\r\n        else {\r\n            res = await JobService.UpdateJob(value.id, value.byName, value.type);\r\n        }\r\n        if (res.success) {\r\n            const myjobs = await BoardService.getJobsOfBoard(props.id);\r\n            const result = await myjobs.json();\r\n            let newItems = [...result.data];\r\n            newItems.forEach(element => {\r\n                element.isNew = 0;\r\n            });\r\n            setItems(newItems);\r\n            // setItems(newSrc);\r\n        }\r\n        else {\r\n            if (res.message == 'Unauthorized') {\r\n                window.location.href = \"/\";\r\n            }\r\n            else{\r\n                setError(res.message);\r\n            }\r\n        }\r\n    }\r\n    const handleDelte = async (id, idxtemp) => {\r\n        if (id === undefined) {\r\n            setItems(items.filter(item => item.isNew != idxtemp));\r\n        } else {\r\n            const res = await JobService.DeleteJob(id);\r\n            if (res.success) {\r\n                setItems(items.filter(item => item.id != id));\r\n            }\r\n            else {\r\n                if (res.message == 'Unauthorized') {\r\n                    window.location.href = \"/\";\r\n                }\r\n                else{\r\n                    setError(res.message);\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n    const handleEdit = async (id) => {\r\n        let newSrc = [...items];\r\n        newSrc.forEach(element => {\r\n            if (element.id == id) {\r\n                element.isNew = idtemp;\r\n            }\r\n        });\r\n        setItems(newSrc);\r\n    }\r\n    const editBoardNameClick = async () => {\r\n        const res = await BoardService.UpdateBoard(props.id,board);\r\n        if (res.success) {\r\n            alert(\"successfully\")\r\n        }\r\n        else {\r\n            if (res.message == 'Unauthorized') {\r\n                window.location.href = \"/\";\r\n            }\r\n            else{\r\n                alert(res.message);\r\n            }\r\n        }\r\n    }\r\n    const EditButton = () => (\r\n        <IconButton aria-label=\"edit\" onClick={editBoardNameClick} >\r\n            <EditIcon />\r\n        </IconButton>\r\n    )\r\n    const handleNameChange = (event) => {\r\n        setBoard(event.target.value);\r\n    }\r\n    if (error) {\r\n        return <div>Error: {error}</div>;\r\n    } else if (!isLoaded) {\r\n        return <div>Loading...</div>;\r\n    } else {\r\n        return (\r\n\r\n            <Container className={classes.cardGrid} maxWidth=\"md\">\r\n                {/* End hero unit */}\r\n                <TextField\r\n                    id=\"board-name\"\r\n                    label=\"Board-Name\"\r\n                    value={board}\r\n                    onChange={handleNameChange}\r\n                    InputProps={{ endAdornment: <EditButton /> }}\r\n                />\r\n                <Grid container spacing={2}>\r\n                    {type.map((item, index) => (\r\n                        <Grid item key={item} xs={12} sm={6} md={4}>\r\n                            {renderSide(item)}\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n            </Container>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport {Link, Redirect} from 'react-router-dom';\nimport AuthService from \"../services/auth.service\";\nexport default class Register extends Component {\n\n    state = {\n        name: '',\n        email: '',\n        password: '',\n        redirect: false,\n        authError: false,\n        isLoading: false,\n    };\n\n    handleEmailChange = event => {\n        this.setState({ email: event.target.value });\n    };\n    handlePwdChange = event => {\n        this.setState({ password: event.target.value });\n    };\n    handleNameChange = event => {\n        this.setState({ name: event.target.value });\n    };\n\n    handleSubmit = async event => {\n        event.preventDefault();\n        this.setState({isLoading: true});\n        const email = this.state.email;\n        const password = this.state.password;\n        const name = this.state.name;\n        const res= await AuthService.register(name, email, password);\n        if (res.success) {\n            window.location.href='/'\n        }\n        else {\n           \n        }\n    };\n\n    renderRedirect = () => {\n        if (this.state.redirect) {\n            return <Redirect to=\"/\" />\n        }\n    };\n\n    render() {\n        const isLoading = this.state.isLoading;\n        return (\n            <div className=\"container\">\n                <div className=\"card card-login mx-auto mt-5\">\n                    <div className=\"card-header\">Register</div>\n                    <div className=\"card-body\">\n                        <form onSubmit={this.handleSubmit}>\n                            <div className=\"form-group\">\n                                <div className=\"form-label-group\">\n                                    <input type=\"text\" id=\"inputName\" className=\"form-control\" placeholder=\"name\"  name=\"name\" onChange={this.handleNameChange} required/>\n                                    <label htmlFor=\"inputName\">Name</label>\n                                </div>\n                            </div>\n\n                            <div className=\"form-group\">\n                                <div className=\"form-label-group\">\n                                    <input id=\"inputEmail\" className={\"form-control \" + (this.state.authError ? 'is-invalid' : '')} placeholder=\"Email address\" type=\"text\" name=\"email\" onChange={this.handleEmailChange} autoFocus required/>\n                                    <label htmlFor=\"inputEmail\">Email address</label>\n                                    <div className=\"invalid-feedback\">\n                                        Please provide a valid Email. or Email Exis\n                                    </div>\n                                </div>\n                            </div>\n                            <div className=\"form-group\">\n                                <div className=\"form-label-group\">\n                                    <input type=\"password\" className=\"form-control\" id=\"inputPassword\" placeholder=\"******\"  name=\"password\" onChange={this.handlePwdChange} required/>\n                                    <label htmlFor=\"inputPassword\">Password</label>\n                                </div>\n                            </div>\n\n                            <div className=\"form-group\">\n                                <button className=\"btn btn-primary btn-block\" type=\"submit\" disabled={this.state.isLoading ? true : false}>Register &nbsp;&nbsp;&nbsp;\n                                    {isLoading ? (\n                                        <span className=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span>\n                                    ) : (\n                                        <span></span>\n                                    )}\n                                </button>\n                            </div>\n                        </form>\n                        <div className=\"text-center\">\n                            <Link className=\"d-block small mt-3\" to={''}>Login Your Account</Link>\n                            <Link className=\"d-block small\" to={'#'}>Forgot Password?</Link>\n                        </div>\n                    </div>\n                </div>\n                {this.renderRedirect()}\n            </div>\n        );\n    }\n}\n\n\n","import React, {Component} from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport Login from \"./pages/login\";\nimport Myboard from \"./pages/myboard\";\nimport Detail from \"./pages/detail\";\nimport Register from \"./pages/register\";\n\nclass App extends Component {\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Router>\n                    <Switch>\n                        <Route exact path='/' component={Login} />\n                        <Route exact path='/myboard' component={Myboard} />\n                        <Route  path='/myboard/:id' render={(props) => {\n                            return (\n                                <Detail id={props.match.params.id} />)\n                        }}/>\n                        <Route path='/register' component={Register} />\n                    </Switch>\n                </Router>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import 'bootstrap/dist/css/bootstrap.min.css';\n// import 'bootstrap/dist/js/bootstrap.bundle.min';\nimport './assets/vendor/fontawesome-free/css/all.min.css'\nimport './assets/css/sb-admin.css'\n// import './assets/vendor/jquery/jquery.min.js'\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}